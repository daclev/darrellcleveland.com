[{"id":1742014800,"title":" Learning to Program","author":"Darrell Cleveland","date":"March 15, 2025","content":"\n## Post #4 - An approach to learning the basics.\n*Last Updated: March 29, 2025*\n\n*Where to start if you wish to learn how to program?*  \n\nThere are tons of options, and no single correct answer.  \n\nBecoming a software developer, starts by requiring a foundation of core programming concepts and problem solving with these concepts. And, how does someone obtain a strong foundation and learn to problem solve?   \nThe answer is... **practice**! \n\nJust like a professional musician, athlete, surgeon, and so many other disciplines, professional software developers have to practice! It is not enough to just learn. It is not enough to borrow an algorithm and make it your own. To truly obtain the skills required to become a software developer, to develop good solutions, to thrive in this field, practice. Then review. And practice some more.\n\nSo again, where should someone start?  \nHere is a list of books I can recommend. These are beginner level. There are tons of other options (languages).\n\n| Language | Book - Amazon Link  |\n|----------|:------------|\n| C | [The C Programming Language](https://amzn.to/3RcreDv) |\n| Go | [The Go Programming Language](https://amzn.to/3FvgtK1) |\n| Java | [Building Java Programs: A Back to Basics Approach 5e](https://amzn.to/4ktWgEu)  |\n\n\nFolks reading this with some technical background might be rolling their eyes üôÑ at the recommendations. That is okay. Everyone is welcome to their own opinion. Why might someone disapprove of these choices? \n\nWell, honestly C is not the easiest language to understand.. also, the C programming language is old, like ancient (created in 1972)! But, the c89 specification was only 200 pages. And, C99/11/17 specification is roughly 600 pages. The language is considered small when compared to others. However, it is most likely the most powerful language today. Multiple modern languages we use today are wrote in C, and there is a good reason why.\n\nAnd Java? Also another dinosaur from another era. The Java language gets a lot of hate for being verbose. Recent versions of Java have started to alleviate this a little, but programs written in Java will most likely be a little longer than those written in newer languages. Some folks consider Java a tough a first language to learn.\n\nSo why would I recommend these?\n\nMany modern languages have the right idea by completely abstracting low level concepts that allow programmers to implement bad practices. My thoughts are that if the opportunity to implement a concept is not possible, then the concept will not be understood which will hinder learning and complete knowledge of the subject. Therefore, I suggest favoring a language such as C++, C#, Java, Kotlin, Go (2nd), Rust (2nd), Typescript/JavaScript, and few more. From this short list, all but Typescript/JavaScript support slightly more advanced topics such as threading. Go and Rust limit inheritance to encourage the idea of such as composition over inheritance, a good rule to follow. To me, it makes sense to start with a language that is used in industry, is mature, and allows the developer to explore advanced topics.  \n\n## Hello, World!\nLets peek a few of the languages mentioned.\n\nC \n```c\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}\n\n```\n\nJava\n```java\npublic class HelloWorld {\n      public static void main(String[] args) {\n            System.out.println(\"Hello, world!\");\n      }\n}\n```\n\nGo\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}\n```\n\nWhen comparing the \"Hello, World\" programs above, they all look similar. That is because all languages at the minimum must have: lexicon (key words, identifiers, symbols with some meaning), syntax (grammar rules), and semantics (meaning). Otherwise, it would not be a language. The pragmatics of the language is mostly why there are different languages. Different strokes for different folks. Other ideas to consider in a language consist of: types, memory model, concurrency, execution, and I am sure loads of language consideration are missing from this.\n\nLook closely at my list, I favor compiled languages over interpreted, except when considering web programming (TypeScript/JavaScript). A decent web browsers will support HTML, CSS, and JavaScript. The language constructs run on a JS Engine (a framework for the web).\n\n### Final thoughts.\nJust start somewhere. Books are not the only way, and are more for a complete understanding. A good tutorial goes a long way. Many sites and platforms are dedicated to teaching programming. Get a feel for few language. After trying some, dig into one that feels right. \n\nHope this content is helpful.  \nThanks for reading!"},{"id":1739599200,"title":"Packaging a Java Application","author":"Darrell Cleveland","date":"February 15, 2025","content":"\n## Post #3 - Want to package a Java app? ‚òïÔ∏è\n*Last Updated: March 1, 2025*\n\n*How to package a .jar into an installer?*\n\n[JLink](https://docs.oracle.com/en/java/javase/23/docs/specs/man/jlink.html) & [JPackage](https://docs.oracle.com/en/java/javase/23/docs/specs/man/jpackage.html) \n\n## Lets start.\nHere are the assumptions, an executable jar has already been built, the target environment does not have a JRE or has the wrong JRE, and the jar should run on the target.\n\nAs most Java folks know when we compile and run a program in Java 9 or beyond, the runtime dependencies must be included (unless the environment exist on the target machine). To keep the runtime-environment minimal, a helpful tool to look into is JLink. The JLink tool is good for obtaining the required JRE modules to run the program. We want this because it means a smaller deployment size, faster application startup, and better memory management.\n\n```java\njlink --module-path $JAVA_HOME/jmods \\\n      --add-modules java.base,java.desktop \\\n      --output /the/output/path\n```\n\n| Arguments    | Description  |\n|----------|:------------|\n| --module-path <path> | the path to the JDK modules (JARs) |\n| --add-modules <modules> | adds necessary modules  |\n| --output <path> | the designated output directory for the runtime image |\n| --compress <i> | controls the compression level 0 (default, no compression), 1 string, 2 zip |\n| --no-header-files | reduces the disk space but prevents JNI |\n| --no-man-pages | excludes the man pages from being included in the image |\n| --strip-debug | removes debugging content to further reduce the image |\n\nThere are additional arguments to consider to completely minimize the required runtime environment. Some actions may reduce the footprint, but make cause harm to the runtime such as fully compressing (slower startup) or removing debugging information (reduced information in stack traces, no stepping code with a debugger, limited profiling, no remote debugger).\n\n### HOLD UP ‚úãüèº\nHow do you know what modules to add to your program?  \n\nHere is the first tool we should have looked at:  \n[jdeps](https://docs.oracle.com/en/java/javase/23/docs/specs/man/jdeps.html) can be used to list the dependent modules in your program. \n\n```java\njdeps --list-deps daprogram.jar\n\noutput:\ndaprogram.jar -> java.base\ndaprogram.jar -> java.desktop\ndaprogram.jar -> whatever the modules are..\n```\n\nAt this point the modules are known, so go back to using the jlink command to add the modules that are needed to create a minimal runtime image. `java.base` is added by default, the other modules are what's important . After the jlink command runs we are ready to use jpackage.\n\n## Its Time to Package this up üì¶\n\nTo create an installer we just need to run the jpackage command. \n\nBefore doing so there is some information to cover. To keep it simple, whatever environment (linux, mac, windows) is used to run jlink (to create a runtime image) and jpackage (to create the installer), is the package compile type that is being targeted for the end JRE. So, if this is not the goal, then one option might be to build for another OS using containerization. In other words, run this in docker (or something similar) for the target OS. Do not forget to consider the architecture! The target system might be arm64v8 or amd64 or whatever. If that is the case, do not build on a different machine and expect the installer to run. Find the correct build needs for the system first.\n\nNow what we have all been waiting for,\n\n```java\njpackage --type deb \\\n         --name daapp \\\n         --app-version 1.0.0 \\\n         --main-jar daprogram.jar \\\n         --main-class com.company.daapp.Application \\\n         --runtime-image /output/path/from/jlink \\\n         --output /path/to/output\n```\n\n| Arguments    | Description  |\n|----------|:------------|\n| --type <T> | the package type (deb, pkg, msi, etc.) |\n| --name <N> | the app name |\n| --main-jar <jar>| the main jar of the application |\n| --main-class <class-path> | the main class to run |\n| --runtime-image <path> | the path to the jdk runtime image (jlink output) |\n| --output <path> | the output directory for jpackage |\n\nThat is all there is to building a simple installer for your program. \nThere is more to learn about the topic, the information provided here is merely to get started.\n\nHope this content is helpful.  \nThanks for reading!"},{"id":1736575200,"title":"Building this Site","author":"Darrell Cleveland","date":"January 11, 2025","content":"\n## Post #2 - Build a Website\n*Last Updated: February 8, 2025*\n\n*How was this blog put together?*\n\nCheck out the source out on github: [daclev/darrellcleveland.com](https://github.com/daclev/darrellcleveland.com). üòã\n\n## Really, How was the site put together?\n\nA mix of the [React Markdown Blog](https://github.com/willjw3/react-markdown-blog) tutorial, googling, and chatgpt.ü§ñü§ñü§ñ \n\nMost of my time is spent working in backend environments. My frontend skills (such as making this site), written in javascript and css are a work in progress üòä. The react markdown blog tutorial was a big jump start.\n\nWebsites need a few components to operate, e.g. here are mine  \n| Need    | Description  |\n|----------|:------------|\n| Domain | [darrellcleveland.com](https://darrellcleveland.com/) |\n| Hosting | [github](https://github.com/) (free - up to 5 gigabytes before there is any real worries) |\n| Code | this is wrote using the [React framework](https://create-react-app.dev/) |\n| Security | SSL/TLS/etc. I'm leaving this to [cloudflare](https://www.cloudflare.com/)|\n| Deployability | github using [gh-pages](https://create-react-app.dev/docs/deployment/#github-pages)|\n| DNS | hook the deployment (host) and domain together. Use DNS records such as A, CNAME, so on.. |\n| Database | somewhere to store data (I'm using Markdown files from a directory.. close enough) |\n\nAdditionally, large systems will need backend applications to handle request and queries from clients. There are various forms of what this could look like and could require a bit of knowledge depending on the complexity. I'll stop here and leave others to go search, study, and explore backend components. It is a big world out there. I'd suggest finding what you enjoy and dive deep into that.\n\n## Parting Thoughts on Building a Website\n Building a website can be fun and as simple or complex as the developer(s) would like or need to make it.\n There are many examples, tutorials, documentation, and communities to help support someone who wants to start.\n\n If someone is looking for an easier - less code/no code option. There are plenty of sites that support this. Prebuilt templates will most likely offer what someone would want for a very simple site, such as a blog or info page. \n\n If someone is looking for something more custom, then digging into a language such as javascript or typescript might be the way to go. Or, hire a developer to help create what your heart desires.\n\nThanks for reading! "},{"id":1735970400,"title":"Blog Goals","author":"Darrell Cleveland","date":"January 4, 2025","content":"\n## Post #1 - Why Blog?\n*Last Updated: January 31, 2025*\n\n*tldr - my purpose for this is to share content that I have found helpful in some way with others..*\n\nWelcome to my blog! üëãüèª  \nThis is a space where one post my not follow another, content should be used with great care (**I'm not liability for other's decisions**, only trying to conjure good vibes), and most thoughts are not my own but are presented through my lens. Credit will be given where credit is due. \n\n\"It is our choices, Harry, that show what we truly are, far more than our abilities\"  -Albus Dumbledore\n\n## What this blog is not.\nIt is not any sort of communal platform. There are no plans to offer others an opportunity to comment.  \n    \n However, others may contact me. If you find a significate error, send me an email with the issue and if you're correct, I'll give you a shout-out in the fixed content!\n  \n ![ProgrammerHumorAncientC](../assets/images/programmerhumor-io-post-meme.jpg)  \n *reference: [programmerhumor.io](https://programmerhumor.io/programming-memes/when-i-try-to-get-help-about-some-ancient-c-header-files/)*\n\n Being DENVERCODER9, not the goal.\n\n ## Parting Thoughts on Blog Goals\n Everyone should blog!   \n It is a great way to give back, reflect on prior experience, and share information that may be helpful to others.\n\nThanks for reading!  \nAnd, hope you read on. "}]